plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id "com.google.protobuf"
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${libs.versions.googleProtobuf.get()}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${libs.versions.grpc.get()}"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                grpc { option 'lite' }
            }
            task.builtins {
                java { option 'lite' }
                kotlin { option 'lite' }
            }
        }
    }
}

kotlin.sourceSets.all {
    // Prevent build warnings for grpc's generated opt-in code
    languageSettings.optIn("kotlin.RequiresOptIn")
}

android {
    namespace 'dev.mobile.maestro'

    compileSdk 31

    defaultConfig {
        applicationId "dev.mobile.maestro"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }
    signingConfigs {
        debug {
            storeFile file('../debug.keystore')
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/INDEX.LIST', 'META-INF/io.netty.versions.properties']
        }
    }
}

tasks.register("copyMaestroAndroid", Copy) {
    dependsOn(packageDebug)

    def maestroAndroidApkPath = "outputs/apk/debug/maestro-android-debug.apk"
    def maestroAndroidApkDest = "../../maestro-client/src/main/resources"

    from layout.buildDirectory.dir(maestroAndroidApkPath)
    into layout.buildDirectory.file(maestroAndroidApkDest)
    rename "maestro-android-debug.apk", "maestro-app.apk"
}

tasks.register("copyMaestroServer", Copy) {
    dependsOn(packageDebugAndroidTest)
    def maestroServerApkPath = "outputs/apk/androidTest/debug/maestro-android-debug-androidTest.apk"
    def maestroServerApkDest = "../../maestro-client/src/main/resources"

    from layout.buildDirectory.dir(maestroServerApkPath)
    into layout.buildDirectory.file(maestroServerApkDest)
    rename "maestro-android-debug-androidTest.apk", "maestro-server.apk"
}

tasks.named("assemble") {
    finalizedBy("copyMaestroAndroid", "copyMaestroServer")
}

sourceSets {
    generated {
        java {
            srcDirs += 'build/generated/source/proto/main/grpc'
            srcDirs += 'build/generated/source/proto/main/java'
            srcDirs += 'build/generated/source/proto/main/kotlin'
        }
    }
}

dependencies {
    protobuf project(':maestro-proto')

    implementation(libs.grpc.kotlin.stub)
    implementation(libs.grpc.netty.shaded)
    implementation(libs.grpc.stub)
    implementation(libs.grpc.protobuf.lite)
    implementation(libs.grpc.okhttp)
    implementation(libs.google.protobuf.kotlin.lite)

    implementation(libs.ktor.server.core)
    implementation(libs.ktor.server.cio)
    implementation(libs.ktor.server.content.negotiation)
    implementation(libs.ktor.serial.gson)

    implementation('org.apache.commons:commons-lang3:3.13.0')
    implementation('org.lsposed.hiddenapibypass:hiddenapibypass:4.3')

    androidTestImplementation(libs.androidx.test.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(libs.androidx.uiautomator)
}
